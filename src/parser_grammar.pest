integer = @{ ASCII_DIGIT+ }

float = @{ "-" ? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }

bool = @{"true" | "false" }

string = @{ "\"" ~ ( "\"\"" | (!"\"" ~ ANY) )* ~ "\"" }

identifier = @{(ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")*}

property = {"." ~ ASCII_ALPHA+}

property_function = {"." ~ func_call}

ops = {
    "-"  | "%" | "+"  | "*" | "<=" | "<"  | "==" | "^" | ">=" | ">"  | "/"
}

priority = {"(" ~ expression ~ ")"}

func_arg = { expression ~ ("," ~ expression)* | "" }

func_call = {identifier ~ "(" ~ func_arg ~ ")"}

array = {"[" ~ expression? ~ ("," ~ expression)* ~ "]"}

array_suite = {(array | float | integer | string | bool | property_function | property | func_call | priority | identifier) ~ array+}

term = _{ array_suite | array | float | integer | string | bool | property_function | property | func_call | priority | identifier }

terms = _{ term+ }


operation = { ops ~ expression }

and_operation = {"&&" ~ expression}

or_operation = {"||" ~ expression}


variableDeclaration = {"let" ~ identifier ~ "=" ~ expression}
variableRedeclaration = {identifier ~ "=" ~ expression}


expression_unit = _{
    variableDeclaration | variableRedeclaration | operation | and_operation | or_operation | terms
}

expression = {expression_unit+}

return_term = {"return" ~ expression}

line = _{(return_term | expression) ~ ";"}

code = {statement+}

statement = _{ if_statement | while_statement  | loop_statement | line }

if_statement = { "if" ~ "("? ~ condition ~ ")"? ~ block ~ (else_block | else_if_block)? }

condition = { (!")" ~ expression)+ }

block = _{ "{" ~ (!"}" ~ code)* ~ "}" }

else_block = { "else" ~ block }

else_if_block = {"else" ~ if_statement}

while_statement = { "while" ~ "("? ~ condition ~ ")"? ~ block }

loop_statement = { "for" ~ "("? ~ identifier ~ "in" ~ expression ~ ")"? ~ block }

WHITESPACE = _{ " " | "\t" | "\n" }