use std::str::FromStr;
use crate::parser::Expr;
use inline_colorization::*;
use crate::error_b;
use crate::Num;
use crate::is_float;
use internment::Intern;
use concat_string::concat_string;
use crate::display::format_expr_type;


grammar;

match {
    r#"[\s]*"# => { },
    //r"//[^\n\r]*[\n\r]*" => { }, // `// comment`
} else {_}

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

IndexedComma<T>: Vec<(usize, T, usize)> = {
    <mut v:(<@L> <T> <@R> ",")*> <start: @L> <e:T?> <end: @R> => match e {
        None => v,
        Some(e) => {
            v.push((start, e, end));
            v
        }
    }
};

Args<T>: Vec<T> = {
    "(" <args: Comma<T>> ")" => args
}

IndexedArgs<T>: Vec<(usize, T, usize)> = {
    "(" <args: IndexedComma<T>> ")" => args
}

Block<T>: T = {
    "{" <o1: T> "}" => o1
}


pub File:Vec<Expr> = {
    <o: Function*> => o,
}

pub Function:Expr = {
    <start: @L> "fn" <o1:Var> <args: Args<Var>> <o3: Block<Code>> <end: @R> => {
        return Expr::FunctionDecl(Box::from([&[o1], args.as_slice()].concat()), o3, start, end);
    }
}

ElseIfBlock:Expr = {
    "else" "if" <o1: Expression> <o2: Block<Code>> => Expr::ElseIfBlock(Box::from(o1), o2)
}


InlineElseIfBlock:Expr = {
    "else" "if" <o1: Expression> <o2: Block<Expression>> => Expr::ElseIfBlock(Box::from(o1), Box::from([o2]))
}

ElseBlock:Expr = {
    "else" <o2: Block<Code>> => Expr::ElseBlock(o2)
}

InlineElseBlock:Expr = {
    "else" <o2: Block<Expression>> => Expr::ElseBlock(Box::from([o2]))
}

ConditionalBlock: Expr = {
    <start: @L> "if" <o1: Expression> <o2: Block<Code>> <o3: ElseIfBlock*> <o4: ElseBlock?> <end: @R> => {
        if o1 == Expr::Bool(true) {
            return Expr::EvalBlock(o2);
        } else if o1 == Expr::Bool(false) {
            if o3.is_empty() {
                if let Some(code) = o4 {
                    Expr::EvalBlock(o2)
                } else {
                    Expr::EvalBlock(Box::from([]))
                }
            } else {
                if let Expr::ElseIfBlock(condition,code) = &o3[0] {
                    Expr::Condition(
                        condition.clone(),
                        Box::from(
                            [&(**code),
                            &o3[1..],
                            match o4 {
                                Some(ref value) => std::slice::from_ref(value),
                                None => &[],
                            }]
                        .concat()
                    ),start,end)
                } else {unreachable!();}
            }
        } else {
            return Expr::Condition(
                Box::from(o1),
                Box::from(
                    [&(*o2),
                    o3.as_slice(),
                    match o4 {
                        Some(ref value) => std::slice::from_ref(value),
                        None => &[],
                    }]
                .concat()
            ),start,end);
        }

    }
}
InlineConditionalBlock: Expr = {
    <start: @L> "if" <o1: Expression> <o2: Block<Expression>> <o3: InlineElseIfBlock*> <o4: InlineElseBlock?> <end: @R> => {
        if o1 == Expr::Bool(true) {
            return o2;
        } else if o1 == Expr::Bool(false) {
            if o3.is_empty() {
                if let Some(code) = o4 {
                    Expr::EvalBlock(Box::from([o2]))
                } else {
                    Expr::EvalBlock(Box::from([]))
                }
            } else {
                if let Expr::ElseIfBlock(condition,code) = &o3[0] {
                    Expr::Condition(
                        condition.clone(),
                        Box::from(
                            [&(**code),
                            &o3[1..],
                            match o4 {
                                Some(ref value) => std::slice::from_ref(value),
                                None => &[],
                            }]
                        .concat()
                    ),start,end)
                } else {unreachable!();}
            }
        } else {
            Expr::Condition(
                Box::from(o1),
                Box::from(
                    [
                    std::slice::from_ref(&o2),
                    o3.as_slice(),
                    match o4 {
                        Some(ref value) => std::slice::from_ref(value),
                        None => &[],
                    }]
                .concat()
                ),start,end
            )
        }
    }
}


MatchBlock:Expr = {
    <start: @L> "match" <match_obj: Expression> "{" <o2: (Expression "=>" Block<Code>)+> <o3: (r"[a-zA-Z_]+\s*=>" Block<Code>)?> "}" <end: @R> => {
        let mut output_code:Vec<Expr> = o2.into_iter().enumerate().map(|(i,(condition,_,code))|
            if i == 0 {condition}
            else {
                Expr::ElseIfBlock(
                    Box::from(
                        Expr::Eq(
                            Box::from(match_obj.clone()),
                            Box::from(condition)
                        )
                    ),
                    code
                )
            }
        ).collect();

        if let Some((_,wildcard_code)) = o3 {
            output_code.push(Expr::ElseBlock(wildcard_code))
        }

        Expr::Condition(Box::from(Expr::Eq(Box::from(match_obj), Box::from(output_code[0].clone()))),Box::from(output_code),start,end)
    }
}


WhileBlock: Expr = {
    "while" <o1: Expression> <o2: Block<Code>> => Expr::WhileBlock(Box::from(o1), o2)
}

ForLoop:Expr = {
    "for" <o1:Var> "in" <o2: Expression> <o3: Block<Code>> => {
        let mut output = vec![o2];
        output.extend(o3);
        Expr::ForLoop(Intern::from(o1),output.into_boxed_slice())
    }
}

pub Code: Box<[Expr]> = {
    <s: Statement*> => s.into_boxed_slice()
}

// TO-DO
pub Import:Expr = {
    <path: r"import [a-zA-Z_.\/-]*"> => {
        Expr::Import(String::from(path.trim_start_matches("import").trim()))
    }
}

EvalBlock:Expr = {
    Block<Code> => {
        Expr::EvalBlock(<>)
    }
}

LoopBlock:Expr = {
    "loop" <o1: Block<Code>> => {
        Expr::LoopBlock(o1)
    }
}

Statement: Expr = {
    ConditionalBlock => <>,
    WhileBlock => <>,
    ForLoop => <>,
    MatchBlock => <>,
    EvalBlock => <>,
    Function => <>,
    LoopBlock => <>,
    <l: Line> ";" => l,
}

Line: Expr = {
    VarDeclare => <>,
    VarAssign => <>,
    OpVarAssign => <>,
    ReturnLn => <>,
    BreakLoop => <>,
    ContinueLoop => <>,
    Expression  => <>,
}

ReturnLn: Expr = {
    "return" <e: Expression?> => Expr::ReturnVal(Box::new(e))
}

BreakLoop:Expr = {
    "break" => Expr::Break
}

ContinueLoop:Expr = {
    "continue" => Expr::Continue
}

VarDeclare: Expr = {
    "let" <v: Var> "=" <e: Expression> => Expr::VarDeclare(Intern::from(v), Box::from(e)),
}

VarAssign: Expr = {
    <start: @L> <v: Var> <end: @R> "=" <e: Expression>  => Expr::VarAssign(Intern::from(v), Box::from(e), start, end),
    <start: @L> <t: Term> <f: ("[" Expression "]")+> <end: @R> "=" <startb: @L> <e: Expression> <endb: @R> => Expr::ArrayModify(Box::from(t), f.into_iter().map(|(_,x,_)| x).collect::<Vec<Expr>>().into_boxed_slice(), Box::from(e), start, end, startb, endb),
}

OpVarAssign: Expr = {
    <start: @L> <v: Var> <end: @R> "+=" <e: Expression> <op_end: @R> => Expr::VarAssign(Intern::from_ref(&v), Box::from(
    Expr::Add(
        Box::from(Expr::Var(Intern::from_ref(&v), start, end)),
        Box::from(e),
        start,op_end
    )), start, end),
    <start: @L> <v: Var> <end: @R> "-=" <e: Expression> <op_end: @R> => Expr::VarAssign(Intern::from_ref(&v), Box::from(
    Expr::Sub(
        Box::from(Expr::Var(Intern::from_ref(&v), start, end)),
        Box::from(e),
        start,op_end
    )), start, end),
    <start: @L> <v: Var> <end: @R> "*=" <e: Expression> <op_end: @R> => Expr::VarAssign(Intern::from_ref(&v), Box::from(
    Expr::Mul(
        Box::from(Expr::Var(Intern::from_ref(&v), start, end)),
        Box::from(e),
        start,op_end
    )), start, end),
    <start: @L> <v: Var> <end: @R> "/=" <e: Expression> <op_end: @R> => Expr::VarAssign(Intern::from_ref(&v), Box::from(
    Expr::Div(
        Box::from(Expr::Var(Intern::from_ref(&v), start, end)),
        Box::from(e),
        start,op_end
    )), start, end),
    <start: @L> <v: Var> <end: @R> "%=" <e: Expression> <op_end: @R> => Expr::VarAssign(Intern::from_ref(&v), Box::from(
    Expr::Mod(
        Box::from(Expr::Var(Intern::from_ref(&v), start, end)),
        Box::from(e),
        start,op_end
    )), start, end),
    <start: @L> <v: Var> <end: @R> "^=" <e: Expression> <op_end: @R> => Expr::VarAssign(Intern::from_ref(&v), Box::from(
    Expr::Pow(
        Box::from(Expr::Var(Intern::from_ref(&v), start, end)),
        Box::from(e),
        start,op_end
    )), start, end),
}

ArrayIndex: Expr = {
    <start: @L> <t: Term> <f: ("[" Expression "]")+> <end: @R> => {
        Expr::GetIndex(Box::from(t), f.into_iter().map(|(_,x,_)| x).collect::<Vec<_>>().into_boxed_slice(), start, end)
    }
}

Expression: Expr = {
    #[precedence(level="0")]
    Term,
    ArrayIndex,
    // method call
    <start: @L> <l:Expression> <end: @R> "." <f:FunctionCall> => {
        if let Expr::FunctionCall(x,y,_,_,indexes) = f {
            return Expr::ObjFunctionCall(Box::from(l),x,y,start,end,indexes);
        } else {
            unreachable!()
        }
    },

    // OPS
    #[precedence(level="1")] #[assoc(side="left")]
    <start: @L> <l:Expression> "||" <r:Expression> <end: @R> => match (l,r) {
        (Expr::Bool(l), Expr::Bool(r)) => Expr::Bool(l || r),
        (l,r) => Expr::BoolOr(Box::from(l),Box::from(r), start, end)
    },

    #[precedence(level="2")] #[assoc(side="left")]
    <start: @L> <l: Expression> "&&" <r: Expression> <end: @R> => match (l,r) {
        (Expr::Bool(l), Expr::Bool(r)) => Expr::Bool(l && r),
        (l,r) => Expr::BoolAnd(Box::from(l),Box::from(r), start, end)
    },

    #[precedence(level="3")] #[assoc(side="left")]
    <l: Expression> "==" <r: Expression> => match (l,r) {
        (Expr::Num(x),Expr::Num(y)) => Expr::Bool(x==y),
        (Expr::Bool(x),Expr::Bool(y)) => Expr::Bool(x==y),
        (Expr::String(x),Expr::String(y)) => Expr::Bool(x==y),
        (l,r) => Expr::Eq(Box::from(l),Box::from(r)),
    },
    #[precedence(level="3")] #[assoc(side="left")]
    <l: Expression> "!=" <r: Expression> => match (l,r) {
        (Expr::Num(x),Expr::Num(y)) => Expr::Bool(x!=y),
        (Expr::Bool(x),Expr::Bool(y)) => Expr::Bool(x!=y),
        (Expr::String(x),Expr::String(y)) => Expr::Bool(x!=y),
        (l,r) => Expr::NotEq(Box::from(l),Box::from(r)),
    },

    #[precedence(level="4")] #[assoc(side="left")]
    <start: @L> <l: Expression> "<" <r: Expression> <end: @R> => match (l,r) {
        (Expr::Num(x),Expr::Num(y)) => Expr::Bool(x < y),
        (l,r) => Expr::Inf(Box::from(l),Box::from(r), start, end)
    },
    #[precedence(level="4")] #[assoc(side="left")]
    <start: @L> <l: Expression> "<=" <r: Expression> <end: @R> => match (l,r) {
        (Expr::Num(x),Expr::Num(y)) => Expr::Bool(x <= y),
        (l,r) => Expr::InfEq(Box::from(l),Box::from(r), start, end)
    },
    #[precedence(level="4")] #[assoc(side="left")]
    <start: @L> <l: Expression> ">" <r: Expression> <end: @R> => match (l,r) {
        (Expr::Num(x),Expr::Num(y)) => Expr::Bool(x > y),
        (l,r) => Expr::Sup(Box::from(l),Box::from(r), start, end)
    },
    #[precedence(level="4")] #[assoc(side="left")]
    <start: @L> <l: Expression> ">=" <r: Expression> <end: @R> => match (l,r) {
        (Expr::Num(x),Expr::Num(y)) => Expr::Bool(x >= y),
        (l,r) => Expr::SupEq(Box::from(l),Box::from(r), start, end)
    },

    #[precedence(level="5")] #[assoc(side="right")]
    <start: @L> <l: Expression> "^" <r: Expression> <end: @R> => match (l,r) {
        (Expr::Num(x),Expr::Num(y)) => Expr::Num(x.powf(y)),
        (l,r) => Expr::Pow(Box::from(l),Box::from(r), start, end)
    },

    #[precedence(level="6")] #[assoc(side="left")]
    <start: @L> <l: Expression> "*" <r: Expression> <end: @R> => match (l, r) {
            (Expr::Num(x), Expr::Num(y)) => Expr::Num(x * y),
            (l, r) => Expr::Mul(Box::from(l), Box::from(r), start, end),
    },
    #[precedence(level="6")] #[assoc(side="left")]
    <start: @L> <l: Expression> "/" <r: Expression> <end: @R> => match (l, r) {
            (Expr::Num(x), Expr::Num(y)) => Expr::Num(x / y),
            (l, r) => Expr::Div(Box::from(l), Box::from(r), start, end),
    },
    #[precedence(level="6")] #[assoc(side="left")]
    <start: @L> <l: Expression> "%" <r: Expression> <end: @R> =>  match (l, r) {
            (Expr::Num(x), Expr::Num(y)) => Expr::Num(x % y),
            (l, r) => Expr::Mod(Box::from(l), Box::from(r), start, end),
    },

    #[precedence(level="7")] #[assoc(side="left")]
    <start: @L> <l: Expression> "+" <r: Expression> <end: @R> => match (l, r) {
            (Expr::Num(x), Expr::Num(y)) => Expr::Num(x + y),
            (Expr::String(x), Expr::String(y)) => Expr::String(concat_string!(x, y)),
            (Expr::Array(x,start,_), Expr::Array(y,_,end)) => Expr::Array(Box::from([x, y].concat()),start,end),
            (l, r) => Expr::Add(Box::from(l), Box::from(r), start, end),
    },
    #[precedence(level="7")] #[assoc(side="left")]
    <start: @L> <l: Expression> "-" <r: Expression> <end: @R> => match (l, r) {
            (Expr::Num(x), Expr::Num(y)) => Expr::Num(x - y),
            (l, r) => Expr::Sub(Box::from(l), Box::from(r), start, end),
    },
    #[precedence(level="8")] #[assoc(side="left")]
    <start: @L> "-" <r:Expression> <end: @R> => match r {
            Expr::Num(x) => Expr::Num(-x),
            l => Expr::Neg(Box::from(l), start, end),
    },
}

Term: Expr = {
    "(" <e: Expression> ")" => e,
    <t: Num> => Expr::Num(t),
    <b: Bool> => Expr::Bool(b),
    <start: @L> <v: Var> <end: @R> => Expr::Var(Intern::from(v), start, end),
    <s: String> => Expr::String(s),
    <a: Array> => <>,
    <f: FunctionCall> => <>,
    <c: InlineConditionalBlock> => <>,
}

ItemBefore<T,S>: T = {
    <l: T> S => l
}
ItemAfter<S,T>: T = {
    S <l: T> => l
}

FunctionCall: Expr = {
    <start: @L> <namespace: ItemBefore<Var, "::">+?> <o1: Var> <args: IndexedArgs<Expression>> <end: @R> => {
        Expr::FunctionCall(args.clone().into_iter().map(|(_,x,_)| x).collect::<Vec<Expr>>().into_boxed_slice(), {
            if let Some(ns) = namespace {
                Box::from([ns.as_slice(), &[o1]].concat())
            } else {
                Box::from(vec![String::from(o1)])
            }
        }, start, end, args.into_iter().map(|(x,_,y)| (x,y)).collect::<Vec<(usize,usize)>>().into_boxed_slice())
    }
}

Array:Expr = {
    <start: @L> "[" <arr: Comma<Expression>> "]" <end: @R> => Expr::Array(arr.into_boxed_slice(), start, end)
}

Num: Num = {
    <n: r"([0-9]*[.])?[0-9]+"> => Num::from_str(n).unwrap_or_else(|_| {error_b!(format_args!("Invalid number: '{color_red}{n}{color_reset}'"));})
}

Bool: bool = {
    "true" => true,
    "false" => false,
}

String: String = {
    <s: r#"\"(?:\"\"|[^\"])*\""#> => String::from(s.trim_matches('"'))
}

Var: String = {
    <v: r"[a-zA-Z_]+"> => String::from(v)
}
