use std::str::FromStr;
use crate::{Expr, Opcode};


grammar;


pub File:Vec<Expr> = {
    <o: Function*> => o,
}

pub Function:Expr = {
    "fn" <o1: Var> "(" <o2: (Var ("," Var)*)?>  ")" "{" <o3:Code> "}" => {
        let mut final_args:Vec<String> = Vec::new();
        if let Some(fn_args) = o2 {
            let args = fn_args;
            final_args.push(args.0);
            if !args.1.is_empty() {
                final_args.extend(args.1.iter().map(|(_,b)|b.clone()).collect::<Vec<String>>())
            }
        }
        return Expr::FunctionDecl(o1, Box::from(final_args), o3);
    }
}

ElseIfBlock:Expr = {
    "else" "if" <o1: Expression> "{" <o2:Code> "}" => Expr::ElseIfBlock(Box::from(o1), o2)
}

ConditionalBlock: Expr = {
    "if" <o1: Expression> "{" <o2:Code> "}" <o3: ElseIfBlock*> <o4: ("else" "{" <Code> "}")?> => Expr::Condition(Box::from(o1), o2, Box::from(o3), o4)
}

WhileBlock: Expr = {
    "while" <o1: Expression> "{" <o2:Code> "}" => Expr::WhileBlock(Box::from(o1), o2)
}

pub Code: Box<[Expr]> = {
    <s: Statement*> => s.into_boxed_slice()
}

Statement: Expr = {
    ConditionalBlock => <>,
    WhileBlock => <>,
    Function => <>,
    Line => <>
}

Line: Expr = {
    <a: VarDeclare> ";" => a,
    <a: VarAssign> ";" => a,
    <a: ReturnLn> ";" => a,
    <a: Expression> ";" => a,
}

ReturnLn: Expr = {
    "return" <e: Expression> => Expr::ReturnVal(Box::from(e))
}

VarDeclare: Expr = {
    "let" <v: Var> "=" <e: Expression> => Expr::VarDeclare(v, Box::from(e))
}

VarAssign: Expr = {
    <v: Var> "=" <e: Expression> => Expr::VarAssign(v, Box::from(e))
}

Expression: Expr = {
    <o:Operation> => o,
    <t: Term> => *t,
}

Operation: Expr = {
    "-" <t: Term> => {
        if let Expr::Num(x) = *t {
            return Expr::Num(-x);
        }
        return Expr::Op(Box::from(Expr::Num(0.0)), Box::from(vec![(Opcode::Neg, t)]));
    },
    <o1: Term> <o3: (<Op> <Term>)+> => {
        Expr::Op(o1, o3.into_boxed_slice())
    }
}

Term: Box<Expr> = {
    "(" <o2: Expression> ")" => Box::new(Expr::Priority(Box::new(o2))),
    <t: Num> => Box::new(Expr::Num(t)),
    <b: Bool> => Box::new(Expr::Bool(b)),
    <s: String> => Box::new(Expr::String(s)),
    <v: Var> => Box::new(Expr::Var(v)),
    <f: FunctionCall> => Box::new(<>),
};

FunctionCall: Expr = {
    <o1: r#"([a-zA-Z_]*)\("#> <o2: Expression?> <o3: ("," Expression)+?> ")" => {
        let mut args:Vec<Expr> = Vec::new();
        if let Some(arg) = o2 {
            args.push(arg);
        }
        if let Some(add_args) = o3 {
            args.extend(add_args.iter().map(|(_, x)|x.clone()));
        }
        Expr::FunctionCall(String::from(o1.trim_end_matches('(')), args.into_boxed_slice())
    }
}

Num: f64 = {
    <n: r"([0-9]*[.])?[0-9]+"> => f64::from_str(n).unwrap()
};

Bool: bool = {
    "true" => true,
    "false" => false,
};

String: String = {
    <s: r#"\"(?:\"\"|[^\"])*\""#> => String::from(s.trim_matches('"'))
}

Var: String = {
    <v: r#"[a-zA-Z_]*"#> => String::from(v),
}

Op: Opcode = {
    "*" => Opcode::Mul,
    "+" => Opcode::Add,
    "/" => Opcode::Div,
    "-" => Opcode::Sub,
    "%" => Opcode::Mod,
    "^" => Opcode::Pow,
    "==" => Opcode::Eq,
    "!="  =>  Opcode::NotEq,
    ">"  =>  Opcode::Sup,
     ">="  => Opcode::SupEq,
     "<" =>   Opcode::Inf,
     "<="  => Opcode::InfEq,
     "&&"  => Opcode::BoolAnd,
     "||"  => Opcode::BoolOr,
}