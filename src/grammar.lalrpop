use std::str::FromStr;
use crate::Opcode;
use crate::parser::Expr;
use inline_colorization::*;
use crate::display::format_parser_error;
use crate::error_b;


grammar;


pub File:Vec<Expr> = {
    <o: Function*> => o,
}

pub Function:Expr = {
    "fn" <o1: r#"([a-zA-Z_]*)\("#> <o2: (Var ("," Var)*)?>  ")" "{" <o3:Code> "}" => {
        let mut final_args:Vec<String> = Vec::new();
        if let Some(fn_args) = o2 {
            let args = fn_args;
            final_args.push(args.0);
            if !args.1.is_empty() {
                final_args.extend(args.1.iter().map(|(_,b)|b.clone()).collect::<Vec<String>>())
            }
        }
        return Expr::FunctionDecl(String::from(o1), Box::from(final_args), o3);
    },
    "fn" <o1:Var> "(" <o2: (Var ("," Var)*)?>  ")" "{" <o3:Code> "}" => {
            let mut final_args:Vec<String> = Vec::new();
            if let Some(fn_args) = o2 {
                let args = fn_args;
                final_args.push(args.0);
                if !args.1.is_empty() {
                    final_args.extend(args.1.iter().map(|(_,b)|b.clone()).collect::<Vec<String>>())
                }
            }
            return Expr::FunctionDecl(o1, Box::from(final_args), o3);
        }
}

ElseIfBlock:Expr = {
    "else" "if" <o1: Expression> "{" <o2:Code> "}" => Expr::ElseIfBlock(Box::from(o1), o2)
}

ElseBlock:Expr = {
    "else" "{" <o2:Code> "}" => Expr::ElseBlock(o2)
}

ConditionalBlock: Expr = {
    "if" <o1: Expression> "{" <o2:Code> "}" <o3: ElseIfBlock*> <o4: ElseBlock?> => {
        let mut code = o2.to_vec();
        for x in o3 {
            code.push(x);
        }
        if let Some(x) = o4 {
            code.push(x);
        }
        Expr::Condition(Box::from(o1), code.into_boxed_slice())
    }
}

WhileBlock: Expr = {
    "while" <o1: Expression> "{" <o2:Code> "}" => Expr::WhileBlock(Box::from(o1), o2)
}

ForLoop:Expr = {
    "for" <o1:Var> "in" <o2: Expression> "{" <o3:Code> "}" => {
        Expr::ForLoop(o1,Box::new(o2),o3)
    }
}

pub Code: Box<[Expr]> = {
    <s: Statement*> => s.into_boxed_slice()
}

pub Import:Expr = {
    <path: r"import [a-zA-Z_.\/-]*"> => {
        Expr::Import(String::from(path.trim_start_matches("import").trim()))
    }
}

Statement: Expr = {
    ConditionalBlock => <>,
    WhileBlock => <>,
    ForLoop => <>,
    Function => <>,
    Line => <>
}

Line: Expr = {
    <a: VarDeclare> ";" => a,
    <a: VarAssign> ";" => a,
    <a: OpVarAssign> ";" => a,
    <a: ReturnLn> ";" => a,
    <a: Expression> ";" => a,
}

ReturnLn: Expr = {
    "return" <e: Expression?> => Expr::ReturnVal(Box::new(e))
}

VarDeclare: Expr = {
    "let" <v: Var> "=" <e: Expression> => Expr::VarDeclare(v, Box::from(e)),
    //! => {
    //    parsing_error!(format_parser_error(<>.error, "Variable Declaration"));
  //  }
}

VarAssign: Expr = {
    <v: Var> "=" <e: Expression> => Expr::VarAssign(v, Box::from(e)),
    <i: IndexAccess> "=" <e: Expression> => {
        if let Expr::GetIndex(a,b) = i {
            Expr::ArrayModify(a,b,Box::new(e))
        } else {
          unreachable!()
        }
    }
}

OpVarAssign: Expr = {
    <v: Var> "+=" <e: Expression> => Expr::VarAssign(v.to_string(), Box::from(Expr::Op(Box::from([Expr::Var(v),Expr::Opcode(Opcode::Add), e])))),
    <v: Var> "-=" <e: Expression> => Expr::VarAssign(v.to_string(), Box::from(Expr::Op(Box::from([Expr::Var(v),Expr::Opcode(Opcode::Sub), e])))),
    <v: Var> "*=" <e: Expression> => Expr::VarAssign(v.to_string(), Box::from(Expr::Op(Box::from([Expr::Var(v),Expr::Opcode(Opcode::Mul), e])))),
    <v: Var> "/=" <e: Expression> => Expr::VarAssign(v.to_string(), Box::from(Expr::Op(Box::from([Expr::Var(v),Expr::Opcode(Opcode::Div), e])))),
    <v: Var> "%=" <e: Expression> => Expr::VarAssign(v.to_string(), Box::from(Expr::Op(Box::from([Expr::Var(v),Expr::Opcode(Opcode::Mod), e])))),
    <v: Var> "^=" <e: Expression> => Expr::VarAssign(v.to_string(), Box::from(Expr::Op(Box::from([Expr::Var(v),Expr::Opcode(Opcode::Pow), e])))),
}

IndexAccess: Expr = {
    <t: Term> <f: ("[" Expression "]")+> => {
        Expr::GetIndex(Box::from(t), f.iter().map(|x| x.1.clone()).collect::<Vec<Expr>>().into_boxed_slice())
    }
}

Expression: Expr = {
    <o:Operation> => o,
    <t: Term> => t,
    <i: IndexAccess> => i,
}

Operation: Expr = {
    "-" <t: Term> => {
        if let Expr::Num(x) = t {
            return Expr::Num(-x);
        }
        return Expr::Op(Box::from([Expr::Num(0.0), Expr::Opcode(Opcode::Neg), t]));
    },
    <o1: Term> <o3: (<Op> <Term>)+> => {
        let mut output_op:Vec<Expr> = vec![o1];
        for x in o3 {
            output_op.push(Expr::Opcode(x.0));
            output_op.push(x.1);
        }
        Expr::Op(output_op.into_boxed_slice())
        //Expr::Op(Box::from(o1), o3.iter().map(|x| (x.0,Box::from(x.1.clone()))).collect::<Vec<_>>().into_boxed_slice())
    }
}

Term: Expr = {
    "(" <o2: Expression> ")" => Expr::Priority(Box::new(o2)),
    <t: Num> => Expr::Num(t),
    <b: Bool> => Expr::Bool(b),
    <s: String> => Expr::String(s),
    <v: Var> => Expr::Var(v),
    "[" <t: Expression?> <f: ("," Expression)*> "]" => {
        let mut terms = Vec::new();
        if let Some(x) = t {
            terms.push(x);
        }
        terms.extend(f.iter().map(|x| x.1.clone()).collect::<Vec<_>>());
        Expr::Array(terms.into_boxed_slice())
    },
    <f: FunctionCall> => <>,
    <o: ObjFunctionCall> => <>,
};

FunctionCall: Expr = {
    <namespace: (Var "::")+?> <o1: r#"([a-zA-Z_]*)\("#> <o2: Expression?> <o3: ("," Expression)+?> ")" => {
        let mut args:Vec<Expr> = Vec::new();
        if let Some(arg) = o2 {
            args.push(arg);
        }
        if let Some(add_args) = o3 {
            args.extend(add_args.iter().map(|(_, x)|x.clone()));
        }
        Expr::FunctionCall(String::from(o1.trim_end_matches('(')), args.into_boxed_slice(), {
            if let Some(ns) = namespace {
                ns.iter().map(|x| x.0.to_string()).collect::<Vec<String>>().into_boxed_slice()
            } else {
                Box::from(Vec::new())
            }
        })
    }
}

ObjFunctionCall:Expr = {
    <t: Term> <o1: r#"\.([a-zA-Z_]*)\("#> <o2: Expression?> <o3: ("," Expression)+?> ")" <o: ("." FunctionCall)*> => {
        let mut args:Vec<Expr> = Vec::new();
        if let Some(arg) = o2 {
            args.push(arg);
        }
        if let Some(add_args) = o3 {
            args.extend(add_args.iter().map(|(_, x)|x.clone()));
        }
        let mut func_calls = vec![(String::from(o1.trim_end_matches('(').trim_start_matches('.')),args.into_boxed_slice())];
        for x in o.iter().map(|x| x.1.clone()) {
            if let Expr::FunctionCall(x,y,_) = x {
                func_calls.push((x,y))
            }
        }
        Expr::ObjFunctionCall(Box::from(t), Box::from(func_calls))
    }
}

Num: f64 = {
    <n: r"([0-9]*[.])?[0-9]+"> => f64::from_str(n).unwrap()
};

Bool: bool = {
    "true" => true,
    "false" => false,
};

String: String = {
    <s: r#"\"(?:\"\"|[^\"])*\""#> => String::from(s.trim_matches('"'))
}

Var: String = {
    <v: r#"[a-zA-Z_]*"#> => String::from(v),
}

Op: Opcode = {
    "*" => Opcode::Mul,
    "+" => Opcode::Add,
    "/" => Opcode::Div,
    "-" => Opcode::Sub,
    "%" => Opcode::Mod,
    "^" => Opcode::Pow,
    "==" => Opcode::Eq,
    "!="  =>  Opcode::NotEq,
    ">"  =>  Opcode::Sup,
     ">="  => Opcode::SupEq,
     "<" =>   Opcode::Inf,
     "<="  => Opcode::InfEq,
     "&&"  => Opcode::BoolAnd,
     "||"  => Opcode::BoolOr,
}