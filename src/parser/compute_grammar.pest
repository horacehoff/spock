integer = @{ !("-") ~ ASCII_DIGIT+ ~ !("." ~ ASCII_DIGIT+)}

float = @{ !("-") ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+) }

bool = @{"true" | "false" }

string = @{ "\"" ~ ( "\"\"" | (!"\"" ~ ANY) )* ~ "\"" }

identifier = @{(ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")*}

property = {"." ~ func_call}

property_function = {func_call ~ "." ~ func_call}


ops = {
    "-"  | "%" | "+"  | "*" | "<=" | "<"  | "==" | "!=" | "^" | ">=" | ">"  | "/"
}

LPAREN = {"("}
RPAREN = {")"}

func_arg = { expression ~ ("," ~ expression)* | "" }

func_call = {identifier ~ "(" ~ func_arg ~ ")"}

func_call_namespace = {(identifier ~ "::")+ ~ func_call}

array = {"[" ~ expression? ~ ("," ~ expression)* ~ "]"}


array_suite = {(array | integer | float | string | bool | property| property_function | func_call_namespace | func_call | (LPAREN ~ expression ~ RPAREN) | identifier) ~ array+}

term = _{ array_suite | array | integer | float | string | bool | property | property_function | func_call_namespace | func_call | (LPAREN ~ expression ~ RPAREN) | identifier }

terms = _{ term+ }

operation = { term ~ (ops ~ term)+ }

// just ints/floats for now
consts_operation = {(integer | float) ~ ops ~ (integer | float) ~ (ops ~ (integer | float | consts_operation))*}

and_operation = {"&&" ~ expression}

or_operation = {"||" ~ expression}


variableDeclaration = {"let" ~ identifier ~ "=" ~ expression}
variableRedeclaration = {identifier ~ "=" ~ expression}


expression_unit_no_op = _{
    terms | consts_operation | and_operation | or_operation
}

expression_no_op = {expression_unit_no_op+}

expression_unit = _{
    consts_operation | operation | and_operation | or_operation | terms
}

expression = {expression_unit+}

return_term = {"return" ~ expression*}
break_term = {"break"}

line = _{(variableDeclaration | variableRedeclaration | return_term | break_term | expression) ~ ";"}

code = {statement+}

statement = _{ if_statement | while_statement | loop_statement | line }

if_statement = { "if" ~ "("? ~ condition ~ ")"? ~ block ~ else_if_block* ~ else_block? }

condition = { (!")" ~ expression)+ }

block = _{ "{" ~ (!"}" ~ code)* ~ "}" }

else_block = { "else" ~ block }

else_if_block = {"else" ~ "if" ~ "("? ~ condition ~ ")"? ~ block}

while_statement = { "while" ~ "("? ~ condition ~ ")"? ~ block }

loop_statement = { "for" ~ "("? ~ identifier ~ "in" ~ expression ~ ")"? ~ block }

function_decl_args = {identifier ~ ("," ~ identifier)*}
function_pattern_match = {"|" ~ identifier ~ "|" ~ expression}
function = {"func" ~ identifier ~ "(" ~ function_decl_args? ~ ")" ~ block}

prog = {function+}

WHITESPACE = _{ " " | "\t" | "\n" }